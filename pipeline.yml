---
groups:
- name: all
  jobs:
  - build-kubernetes-release
  - deploy-kubernetes-staging
  - deploy-kubernetes-broker-staging
  - deploy-kubernetes-production
  - deploy-kubernetes-broker-production
- name: release
  jobs:
  - build-kubernetes-release
- name: deploy
  jobs:
  - deploy-kubernetes-staging
  - deploy-kubernetes-broker-staging
  - deploy-kubernetes-production
  - deploy-kubernetes-broker-production

jobs:
- name: build-kubernetes-release
  plan:
  - aggregate:
    - get: release-git-repo
      resource: kubernetes-release
      trigger: true
    - get: pipeline-tasks
    - get: final-builds-dir-tarball
      resource: kubernetes-final-builds-dir-tarball
    - get: releases-dir-tarball
      resource: kubernetes-releases-dir-tarball
  - task: finalize-release
    file: pipeline-tasks/finalize-bosh-release.yml
    params:
      PRIVATE_YML_CONTENT: {{kubernetes-private-yml}}
  - aggregate:
    - put: kubernetes-release-tarball
      params:
        file: finalized-release/kubernetes-*.tgz
    - put: kubernetes-final-builds-dir-tarball
      params:
        file: finalized-release/final-builds-dir-kubernetes.tgz
    - put: kubernetes-releases-dir-tarball
      params:
        file: finalized-release/releases-dir-kubernetes.tgz

- name: deploy-kubernetes-staging
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: kubernetes-release
    - get: kubernetes-release-tarball
      trigger: true
    - get: common-staging
      trigger: true
    - get: kubernetes-stemcell
  - task: kubernetes-manifest
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: kubernetes-release
      - name: common-staging
      run:
        path: sh
        args:
        - -exc
        - |
          kubernetes-release/generate_deployment_manifest aws common-staging/secrets.yml \
            > kubernetes-manifest/manifest.yml
      outputs:
      - name: kubernetes-manifest
  - put: kubernetes-staging-deployment
    params:
      cert: common-staging/boshCA.crt
      manifest: kubernetes-manifest/manifest.yml
      releases:
      - kubernetes-release-tarball/*.tgz
      stemcells:
      - kubernetes-stemcell/*.tgz
    on_failure:
      put: slack
      params:
        text: |
          :x: FAILED to deploy kubernetes on staging
          <https://ci.cloud.gov/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: Successfully deployed kubernetes on staging
          <https://ci.cloud.gov/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
  - task: create-kubernetes-dns
    file: pipeline-tasks/bosh-errand.yml
    input_mapping:
      common: common-staging
    params:
      BOSH_ERRAND: create-kubernetes-dns
      BOSH_TARGET: {{kubernetes-staging-deployment-bosh-target}}
      BOSH_USERNAME: {{kubernetes-staging-deployment-bosh-username}}
      BOSH_PASSWORD: {{kubernetes-staging-deployment-bosh-password}}
      BOSH_DEPLOYMENT_NAME: {{kubernetes-staging-deployment-bosh-deployment}}
      BOSH_CACERT: common/boshCA.crt

- name: deploy-kubernetes-broker-staging
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: kubernetes-broker
      trigger: true
  - put: kubernetes-broker-staging-deployment
    params:
      manifest: kubernetes-broker/manifest.yml
      path: kubernetes-broker
      current_app_name: kubernetes-broker
      environment_variables:
        AUTH_USER: {{broker-auth-user-staging}}
        AUTH_PASS: {{broker-auth-pass-staging}}
        CONNECTOR_TYPE: static
        CLUSTER_API_SERVER: {{api-server-staging}}
        CLUSTER_USERNAME: {{cluster-username-staging}}
        CLUSTER_PASSWORD: {{cluster-password-staging}}
        CF_CLIENT_ID: {{cf-client-id-staging}}
        CF_CLIENT_SECRET: {{cf-client-secret-staging}}
        CF_TOKEN_URL: {{cf-token-url-staging}}
        CF_API_ENDPOINT: {{cf-api-url-staging}}
        CF_TOKEN_KEY: {{cf-token-key-staging}}
  - task: register-service-broker-staging
    file: pipeline-tasks/register-service-broker.yml
    params:
      CF_API_URL: {{cf-api-url-staging}}
      CF_USERNAME: {{cf-deploy-username-staging}}
      CF_PASSWORD: {{cf-deploy-password-staging}}
      CF_ORGANIZATION: {{cf-organization-staging}}
      CF_SPACE: {{cf-space-staging}}
      BROKER_NAME: kubernetes-broker
      AUTH_USER: {{broker-auth-user-staging}}
      AUTH_PASS: {{broker-auth-pass-staging}}
      SERVICE_NAMES: {{broker-service-names-staging}}
      SERVICE_ORGANIZATION: {{broker-service-organization-staging}}
      SERVICE_PLAN: {{broker-service-plan-staging}}

- name: deploy-kubernetes-production
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: kubernetes-release
    - get: kubernetes-release-tarball
      trigger: true
    - get: common-production
      trigger: true
    - get: kubernetes-stemcell
  - task: kubernetes-manifest
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: kubernetes-release
      - name: common-production
      run:
        path: sh
        args:
        - -exc
        - |
          kubernetes-release/generate_deployment_manifest aws common-production/secrets.yml \
            > kubernetes-manifest/manifest.yml
      outputs:
      - name: kubernetes-manifest
  - put: kubernetes-production-deployment
    params:
      cert: common-production/boshCA.crt
      manifest: kubernetes-manifest/manifest.yml
      releases:
      - kubernetes-release-tarball/*.tgz
      stemcells:
      - kubernetes-stemcell/*.tgz
    on_failure:
      put: slack
      params:
        text: |
          :x: FAILED to deploy kubernetes on production
          <https://ci.cloud.gov/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: Successfully deployed kubernetes on production
          <https://ci.cloud.gov/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
  - task: create-kubernetes-dns
    file: pipeline-tasks/bosh-errand.yml
    input_mapping:
      common: common-production
    params:
      BOSH_ERRAND: create-kubernetes-dns
      BOSH_TARGET: {{kubernetes-production-deployment-bosh-target}}
      BOSH_USERNAME: {{kubernetes-production-deployment-bosh-username}}
      BOSH_PASSWORD: {{kubernetes-production-deployment-bosh-password}}
      BOSH_DEPLOYMENT_NAME: {{kubernetes-production-deployment-bosh-deployment}}
      BOSH_CACERT: common/boshCA.crt

- name: deploy-kubernetes-broker-production
  plan:
  - get: kubernetes-broker
    trigger: true
  - put: kubernetes-broker-production-deployment
    params:
      manifest: kubernetes-broker/manifest.yml
      path: kubernetes-broker
      current_app_name: kubernetes-broker
      environment_variables:
        AUTH_USER: {{broker-auth-user-production}}
        AUTH_PASS: {{broker-auth-pass-production}}
        CONNECTOR_TYPE: static
        CLUSTER_API_SERVER: {{api-server-production}}
        CLUSTER_USERNAME: {{cluster-username-production}}
        CLUSTER_PASSWORD: {{cluster-password-production}}
        CF_CLIENT_ID: {{cf-client-id-production}}
        CF_CLIENT_SECRET: {{cf-client-secret-production}}
        CF_TOKEN_URL: {{cf-token-url-production}}
        CF_API_ENDPOINT: {{cf-api-url-production}}
        CF_TOKEN_KEY: {{cf-token-key-production}}
  - task: register-service-broker-production
    file: pipeline-tasks/register-service-broker.yml
    params:
      CF_API_URL: {{cf-api-url-production}}
      CF_USERNAME: {{cf-deploy-username-production}}
      CF_PASSWORD: {{cf-deploy-password-production}}
      CF_ORGANIZATION: {{cf-organization-production}}
      CF_SPACE: {{cf-space-production}}
      BROKER_NAME: kubernetes-broker
      AUTH_USER: {{broker-auth-user-production}}
      AUTH_PASS: {{broker-auth-pass-production}}
      SERVICE_NAMES: {{broker-service-names-production}}
      SERVICE_ORGANIZATION: {{broker-service-organization-production}}
      SERVICE_PLAN: {{broker-service-plan-production}}

resources:
- name: pipeline-tasks
  type: git
  source:
    uri: {{pipeline-tasks-git-url}}
    branch: {{pipeline-tasks-git-branch}}

- name: kubernetes-release
  type: git
  source:
    uri: {{kubernetes-release-git-url}}
    branch: {{kubernetes-release-git-branch}}

- name: kubernetes-broker
  type: git
  source:
    uri: {{kubernetes-broker-git-url}}
    branch: {{kubernetes-broker-git-branch}}

- name: kubernetes-release-tarball
  type: s3
  source:
    bucket: {{s3-bosh-releases-bucket}}
    regexp: kubernetes-(.*).tgz
    access_key_id: {{s3-bosh-releases-access-key-id}}
    secret_access_key: {{s3-bosh-releases-secret-access-key}}
    region_name: {{aws-region}}

- name: kubernetes-final-builds-dir-tarball
  type: s3
  source:
    bucket: {{s3-bosh-releases-bucket}}
    versioned_file: final-builds-dir-kubernetes.tgz
    access_key_id: {{s3-bosh-releases-access-key-id}}
    secret_access_key: {{s3-bosh-releases-secret-access-key}}
    region_name: {{aws-region}}

- name: kubernetes-releases-dir-tarball
  type: s3
  source:
    bucket: {{s3-bosh-releases-bucket}}
    versioned_file: releases-dir-kubernetes.tgz
    access_key_id: {{s3-bosh-releases-access-key-id}}
    secret_access_key: {{s3-bosh-releases-secret-access-key}}
    region_name: {{aws-region}}

- name: kubernetes-stemcell
  type: s3
  source:
    access_key_id: {{ci-access-key-id}}
    bucket: {{stemcell-bucket}}
    regexp: light-bosh-stemcell-(.*)-aws-xen-hvm-ubuntu-trusty-go_agent.tgz
    region_name: {{aws-region}}
    secret_access_key: {{ci-secret-access-key}}

- name: common-staging
  type: cg-common
  source:
    region: {{aws-region}}
    bucket_name: {{kubernetes-staging-private-bucket}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: kubernetes.yml
    secrets_passphrase: {{kubernetes-staging-private-passphrase}}
    bosh_cert: bosh.pem

- name: common-production
  type: cg-common
  source:
    region: {{aws-region}}
    bucket_name: {{kubernetes-production-private-bucket}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: kubernetes.yml
    secrets_passphrase: {{kubernetes-production-private-passphrase}}
    bosh_cert: bosh.pem

- name: kubernetes-staging-deployment
  type: 18f-bosh-deployment
  source:
    target: {{kubernetes-staging-deployment-bosh-target}}
    username: {{kubernetes-staging-deployment-bosh-username}}
    password: {{kubernetes-staging-deployment-bosh-password}}
    deployment: {{kubernetes-staging-deployment-bosh-deployment}}
    ignore_ssl: false

- name: kubernetes-production-deployment
  type: 18f-bosh-deployment
  source:
    target: {{kubernetes-production-deployment-bosh-target}}
    username: {{kubernetes-production-deployment-bosh-username}}
    password: {{kubernetes-production-deployment-bosh-password}}
    deployment: {{kubernetes-production-deployment-bosh-deployment}}
    ignore_ssl: false

- name: kubernetes-broker-staging-deployment
  type: cf
  source:
    api: {{cf-api-url-staging}}
    username: {{cf-deploy-username-staging}}
    password: {{cf-deploy-password-staging}}
    organization: {{cf-organization-staging}}
    space: {{cf-space-staging}}
    skip_cert_check: false

- name: kubernetes-broker-production-deployment
  type: cf
  source:
    api: {{cf-api-url-production}}
    username: {{cf-deploy-username-production}}
    password: {{cf-deploy-password-production}}
    organization: {{cf-organization-production}}
    space: {{cf-space-production}}
    skip_cert_check: false

- name: slack
  type: slack-notification
  source:
    url: {{slack-webhook-url}}

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: 18f-bosh-deployment
  type: docker-image
  source:
    repository: 18fgsa/bosh-deployment-resource

- name: cg-common
  type: docker-image
  source:
    repository: 18fgsa/cg-common-resource
