---
groups:
- name: all
  jobs:
  - build-kubernetes-release
  - deploy-kubernetes-staging
  - deploy-kubernetes-broker-staging
  - acceptance-tests-staging
  - deploy-kubernetes-production
  - deploy-kubernetes-broker-production
  - acceptance-tests-production
- name: release
  jobs:
  - build-kubernetes-release
- name: deploy
  jobs:
  - deploy-kubernetes-staging
  - deploy-kubernetes-broker-staging
  - acceptance-tests-staging
  - deploy-kubernetes-production
  - deploy-kubernetes-broker-production
  - acceptance-tests-production

params:
  staging:
    cf: &cf-staging
      CF_API_URL: {{cf-api-url-staging}}
      CF_USERNAME: {{cf-deploy-username-staging}}
      CF_PASSWORD: {{cf-deploy-password-staging}}
      CF_ORGANIZATION: {{cf-organization-staging}}
      CF_SPACE: {{cf-space-staging}}
    bosh-errand: &bosh-errand-staging
      BOSH_TARGET: {{kubernetes-staging-deployment-bosh-target}}
      BOSH_USERNAME: {{kubernetes-staging-deployment-bosh-username}}
      BOSH_PASSWORD: {{kubernetes-staging-deployment-bosh-password}}
      BOSH_DEPLOYMENT_NAME: {{kubernetes-staging-deployment-bosh-deployment}}
      BOSH_CACERT: common/boshCA.crt
  production:
    cf: &cf-production
      CF_API_URL: {{cf-api-url-production}}
      CF_USERNAME: {{cf-deploy-username-production}}
      CF_PASSWORD: {{cf-deploy-password-production}}
      CF_ORGANIZATION: {{cf-organization-production}}
      CF_SPACE: {{cf-space-production}}
    bosh-errand: &bosh-errand-production
      BOSH_TARGET: {{kubernetes-production-deployment-bosh-target}}
      BOSH_USERNAME: {{kubernetes-production-deployment-bosh-username}}
      BOSH_PASSWORD: {{kubernetes-production-deployment-bosh-password}}
      BOSH_DEPLOYMENT_NAME: {{kubernetes-production-deployment-bosh-deployment}}
      BOSH_CACERT: common/boshCA.crt

jobs:
- name: build-kubernetes-release
  plan:
  - aggregate:
    - get: release-git-repo
      resource: kubernetes-release
      trigger: true
    - get: pipeline-tasks
    - get: final-builds-dir-tarball
      resource: kubernetes-final-builds-dir-tarball
    - get: releases-dir-tarball
      resource: kubernetes-releases-dir-tarball
  - task: finalize-release
    file: pipeline-tasks/finalize-bosh-release.yml
    params:
      PRIVATE_YML_CONTENT: {{kubernetes-private-yml}}
  - aggregate:
    - put: kubernetes-release-tarball
      params:
        file: finalized-release/kubernetes-*.tgz
    - put: kubernetes-final-builds-dir-tarball
      params:
        file: finalized-release/final-builds-dir-kubernetes.tgz
    - put: kubernetes-releases-dir-tarball
      params:
        file: finalized-release/releases-dir-kubernetes.tgz

- name: deploy-kubernetes-staging
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: kubernetes-release
      params:
        submodules: none
    - get: kubernetes-config
      trigger: true
    - get: kubernetes-release-tarball
      trigger: true
    - get: common-staging
      trigger: true
    - get: kubernetes-stemcell
      trigger: true
    - get: consul-boshrelease
      trigger: true
  - task: kubernetes-manifest
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: kubernetes-release
      - name: kubernetes-config
      - name: common-staging
      run:
        path: sh
        args:
        - -exc
        - |
          export SPRUCE_FILE_BASE_PATH=./kubernetes-config
          kubernetes-release/generate_deployment_manifest aws \
            common-staging/secrets.yml \
            kubernetes-config/k8s-jobs.yml \
            > kubernetes-manifest/manifest.yml
      outputs:
      - name: kubernetes-manifest
  - put: kubernetes-staging-deployment
    params:
      cert: common-staging/boshCA.crt
      manifest: kubernetes-manifest/manifest.yml
      releases:
      - kubernetes-release-tarball/*.tgz
      stemcells:
      - kubernetes-stemcell/*.tgz
    on_failure:
      put: slack
      params:
        text: |
          :x: FAILED to deploy kubernetes on staging
          <https://$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: Successfully deployed kubernetes on staging
          <https://$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
  - task: create-kubernetes-dns
    file: pipeline-tasks/bosh-errand.yml
    input_mapping:
      common: common-staging
    params:
      BOSH_ERRAND: create-kubernetes-dns
      <<: *bosh-errand-staging
  - task: create-kubernetes-monitoring
    file: pipeline-tasks/bosh-errand.yml
    input_mapping:
      common: common-staging
    params:
      BOSH_ERRAND: create-kubernetes-monitoring
      <<: *bosh-errand-staging
  - task: apply-kubernetes-manifests
    file: pipeline-tasks/bosh-errand.yml
    input_mapping:
      common: common-staging
    params:
      BOSH_ERRAND: apply-kubernetes-manifests
      <<: *bosh-errand-staging

- name: deploy-kubernetes-broker-staging
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: kubernetes-broker
    - get: kubernetes-config
      trigger: true
  - task: run-tests
    file: kubernetes-config/run-tests.yml
  - put: kubernetes-broker-staging-deployment
    params:
      manifest: kubernetes-broker/manifest.yml
      path: kubernetes-broker
      current_app_name: kubernetes-broker
      environment_variables:
        AUTH_USER: {{broker-auth-user-staging}}
        AUTH_PASS: {{broker-auth-pass-staging}}
        CONNECTOR_TYPE: static
        CONSUL_DOMAIN: {{consul-domain-staging}}
        CLUSTER_API_SERVER: {{api-server-staging}}
        CLUSTER_USERNAME: {{cluster-username-staging}}
        CLUSTER_PASSWORD: {{cluster-password-staging}}
        CF_CLIENT_ID: {{cf-client-id-staging}}
        CF_CLIENT_SECRET: {{cf-client-secret-staging}}
        CF_TOKEN_URL: {{cf-token-url-staging}}
        CF_API_ENDPOINT: {{cf-api-url-staging}}
        CF_TOKEN_KEY: {{cf-token-key-staging}}
  - task: register-service-broker-staging
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-staging
      BROKER_NAME: kubernetes-broker
      AUTH_USER: {{broker-auth-user-staging}}
      AUTH_PASS: {{broker-auth-pass-staging}}
      SERVICES: {{broker-service-names-staging}}
      SERVICE_ORGANIZATION: {{broker-service-organization-staging}}

- name: acceptance-tests-staging
  plan:
  - aggregate:
    - get: kubernetes-config
    - get: kubernetes-broker-staging-deployment
      passed: [deploy-kubernetes-broker-staging]
      trigger: true
  - aggregate:
    - task: acceptance-test-redis28-free
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-staging
        APP_NAME: redis28-test
        SERVICE_NAME: redis28-multinode
        PLAN_NAME: free
        SERVICE_INSTANCE_NAME: redis28-free
        TEST_PATH: kubernetes-config/acceptance/redis28
    - task: acceptance-test-mongo30-persistent
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-staging
        APP_NAME: mongodb30-test
        SERVICE_NAME: mongodb30-multinode
        PLAN_NAME: persistent
        SERVICE_INSTANCE_NAME: mongodb30-persistent
        TEST_PATH: kubernetes-config/acceptance/mongodb30
    - task: acceptance-test-elasticsearch23-persistent
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-staging
        APP_NAME: elasticsearch23-test
        SERVICE_NAME: elasticsearch23-multinode
        PLAN_NAME: persistent
        SERVICE_INSTANCE_NAME: elasticsearch23-persistent
        TEST_PATH: kubernetes-config/acceptance/elasticsearch23
    - task: acceptance-test-elasticsearch17-persistent
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-staging
        APP_NAME: elasticsearch17-test
        SERVICE_NAME: elasticsearch17-multinode
        PLAN_NAME: persistent
        SERVICE_INSTANCE_NAME: elasticsearch17-persistent
        TEST_PATH: kubernetes-config/acceptance/elasticsearch17
    # - task: acceptance-test-mysql56-persistent
    #   file: kubernetes-config/acceptance/run-acceptance-test.yml
    #   params:
    #     <<: *cf-staging
    #     APP_NAME: mysql56-test
    #     SERVICE_NAME: mysql56-multinode
    #     PLAN_NAME: persistent
    #     SERVICE_INSTANCE_NAME: mysql56-persistent
    #     TEST_PATH: kubernetes-config/acceptance/sql
    #     MANIFEST_FILE: manifest-mysql56-multinode.yml
    # - task: acceptance-test-postgresql94-persistent
    #   file: kubernetes-config/acceptance/run-acceptance-test.yml
    #   params:
    #     <<: *cf-staging
    #     APP_NAME: postgresql94-test
    #     SERVICE_NAME: postgresql94-multinode
    #     PLAN_NAME: persistent
    #     SERVICE_INSTANCE_NAME: postgresql94-persistent
    #     TEST_PATH: kubernetes-config/acceptance/sql
    #     MANIFEST_FILE: manifest-postgresql94-multinode.yml

- name: deploy-kubernetes-production
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: kubernetes-release
      params:
        submodules: none
    - get: kubernetes-config
      trigger: true
    - get: kubernetes-release-tarball
      trigger: true
    - get: common-production
      trigger: true
    - get: kubernetes-stemcell
      trigger: true
    - get: consul-boshrelease
      trigger: true
    - get: kubernetes-broker-staging-deployment
      passed: [acceptance-tests-staging]
  - task: kubernetes-manifest
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: kubernetes-release
      - name: kubernetes-config
      - name: common-production
      run:
        path: sh
        args:
        - -exc
        - |
          export SPRUCE_FILE_BASE_PATH=./kubernetes-config
          kubernetes-release/generate_deployment_manifest aws \
            common-production/secrets.yml \
            kubernetes-config/k8s-jobs.yml \
            > kubernetes-manifest/manifest.yml
      outputs:
      - name: kubernetes-manifest
  - put: kubernetes-production-deployment
    params:
      cert: common-production/boshCA.crt
      manifest: kubernetes-manifest/manifest.yml
      releases:
      - kubernetes-release-tarball/*.tgz
      stemcells:
      - kubernetes-stemcell/*.tgz
    on_failure:
      put: slack
      params:
        text: |
          :x: FAILED to deploy kubernetes on production
          <https://$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
    on_success:
      put: slack
      params:
        text: |
          :white_check_mark: Successfully deployed kubernetes on production
          <https://$ATC_EXTERNAL_URL/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
        channel: {{slack-channel}}
        username: {{slack-username}}
        icon_url: {{slack-icon-url}}
  - task: create-kubernetes-dns
    file: pipeline-tasks/bosh-errand.yml
    input_mapping:
      common: common-production
    params:
      BOSH_ERRAND: create-kubernetes-dns
      <<: *bosh-errand-production
  - task: create-kubernetes-monitoring
    file: pipeline-tasks/bosh-errand.yml
    input_mapping:
      common: common-production
    params:
      BOSH_ERRAND: create-kubernetes-monitoring
      <<: *bosh-errand-production
  - task: apply-kubernetes-manifests
    file: pipeline-tasks/bosh-errand.yml
    input_mapping:
      common: common-production
    params:
      BOSH_ERRAND: apply-kubernetes-manifests
      <<: *bosh-errand-production

- name: deploy-kubernetes-broker-production
  plan:
  - aggregate:
    - get: kubernetes-broker
      trigger: true
    - get: kubernetes-broker-staging-deployment
      passed: [acceptance-tests-staging]
  - put: kubernetes-broker-production-deployment
    params:
      manifest: kubernetes-broker/manifest.yml
      path: kubernetes-broker
      current_app_name: kubernetes-broker
      environment_variables:
        AUTH_USER: {{broker-auth-user-production}}
        AUTH_PASS: {{broker-auth-pass-production}}
        CONNECTOR_TYPE: static
        CONSUL_DOMAIN: {{consul-domain-production}}
        CLUSTER_API_SERVER: {{api-server-production}}
        CLUSTER_USERNAME: {{cluster-username-production}}
        CLUSTER_PASSWORD: {{cluster-password-production}}
        CF_CLIENT_ID: {{cf-client-id-production}}
        CF_CLIENT_SECRET: {{cf-client-secret-production}}
        CF_TOKEN_URL: {{cf-token-url-production}}
        CF_API_ENDPOINT: {{cf-api-url-production}}
        CF_TOKEN_KEY: {{cf-token-key-production}}
  - task: register-service-broker-production
    file: pipeline-tasks/register-service-broker.yml
    params:
      <<: *cf-production
      BROKER_NAME: kubernetes-broker
      AUTH_USER: {{broker-auth-user-production}}
      AUTH_PASS: {{broker-auth-pass-production}}
      SERVICES: {{broker-service-names-production}}
      SERVICE_ORGANIZATION: {{broker-service-organization-production}}

- name: acceptance-tests-production
  plan:
  - aggregate:
    - get: kubernetes-config
    - get: kubernetes-broker-production-deployment
      passed: [deploy-kubernetes-broker-production]
      trigger: true
  - aggregate:
    - task: acceptance-test-redis28-free
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production
        APP_NAME: redis28-test
        SERVICE_NAME: redis28-multinode
        PLAN_NAME: free
        SERVICE_INSTANCE_NAME: redis28-free
        TEST_PATH: kubernetes-config/acceptance/redis28
    - task: acceptance-test-mongo30-persistent
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production
        APP_NAME: mongodb30-test
        SERVICE_NAME: mongodb30-multinode
        PLAN_NAME: persistent
        SERVICE_INSTANCE_NAME: mongodb30-persistent
        TEST_PATH: kubernetes-config/acceptance/mongodb30
    - task: acceptance-test-elasticsearch23-persistent
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production
        APP_NAME: elasticsearch23-test
        SERVICE_NAME: elasticsearch23-multinode
        PLAN_NAME: persistent
        SERVICE_INSTANCE_NAME: elasticsearch23-persistent
        TEST_PATH: kubernetes-config/acceptance/elasticsearch23
    - task: acceptance-test-elasticsearch17-persistent
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production
        APP_NAME: elasticsearch17-test
        SERVICE_NAME: elasticsearch17-multinode
        PLAN_NAME: persistent
        SERVICE_INSTANCE_NAME: elasticsearch17-persistent
        TEST_PATH: kubernetes-config/acceptance/elasticsearch17
    # - task: acceptance-test-mysql56-persistent
    #   file: kubernetes-config/acceptance/run-acceptance-test.yml
    #   params:
    #     <<: *cf-production
    #     APP_NAME: mysql56-test
    #     SERVICE_NAME: mysql56-multinode
    #     PLAN_NAME: persistent
    #     SERVICE_INSTANCE_NAME: mysql56-persistent
    #     TEST_PATH: kubernetes-config/acceptance/sql
    #     MANIFEST_FILE: manifest-mysql56-multinode.yml
    # - task: acceptance-test-postgresql94-persistent
    #   file: kubernetes-config/acceptance/run-acceptance-test.yml
    #   params:
    #     <<: *cf-production
    #     APP_NAME: postgresql94-test
    #     SERVICE_NAME: postgresql94-multinode
    #     PLAN_NAME: persistent
    #     SERVICE_INSTANCE_NAME: postgresql94-persistent
    #     TEST_PATH: kubernetes-config/acceptance/sql
    #     MANIFEST_FILE: manifest-postgresql94-multinode.yml

resources:
- name: pipeline-tasks
  type: git
  source:
    uri: {{pipeline-tasks-git-url}}
    branch: {{pipeline-tasks-git-branch}}

- name: kubernetes-release
  type: git
  source:
    uri: {{kubernetes-release-git-url}}
    branch: {{kubernetes-release-git-branch}}

- name: kubernetes-broker
  type: git
  source:
    uri: {{kubernetes-broker-git-url}}
    branch: {{kubernetes-broker-git-branch}}

- name: kubernetes-config
  type: git
  source:
    uri: {{kubernetes-config-git-url}}
    branch: {{kubernetes-config-git-branch}}

- name: kubernetes-release-tarball
  type: s3
  source:
    bucket: {{s3-bosh-releases-bucket}}
    regexp: kubernetes-(.*).tgz
    access_key_id: {{s3-bosh-releases-access-key-id}}
    secret_access_key: {{s3-bosh-releases-secret-access-key}}
    region_name: {{aws-region}}
    server_side_encryption: AES256

- name: kubernetes-final-builds-dir-tarball
  type: s3
  source:
    bucket: {{s3-bosh-releases-bucket}}
    versioned_file: final-builds-dir-kubernetes.tgz
    access_key_id: {{s3-bosh-releases-access-key-id}}
    secret_access_key: {{s3-bosh-releases-secret-access-key}}
    region_name: {{aws-region}}
    server_side_encryption: AES256

- name: kubernetes-releases-dir-tarball
  type: s3
  source:
    bucket: {{s3-bosh-releases-bucket}}
    versioned_file: releases-dir-kubernetes.tgz
    access_key_id: {{s3-bosh-releases-access-key-id}}
    secret_access_key: {{s3-bosh-releases-secret-access-key}}
    region_name: {{aws-region}}
    server_side_encryption: AES256

- name: kubernetes-stemcell
  type: s3
  source:
    access_key_id: {{ci-access-key-id}}
    bucket: {{stemcell-bucket}}
    regexp: light-bosh-stemcell-(.*)-aws-xen-hvm-ubuntu-trusty-go_agent.tgz
    region_name: {{aws-region}}
    secret_access_key: {{ci-secret-access-key}}

- name: consul-boshrelease
  type: bosh-io-release
  source:
    repository: cloudfoundry-community/consul-boshrelease

- name: common-staging
  type: cg-common
  source:
    region: {{aws-region}}
    bucket_name: {{kubernetes-staging-private-bucket}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: kubernetes.yml
    secrets_passphrase: {{kubernetes-staging-private-passphrase}}
    bosh_cert: bosh.pem

- name: common-production
  type: cg-common
  source:
    region: {{aws-region}}
    bucket_name: {{kubernetes-production-private-bucket}}
    access_key_id: {{ci-access-key-id}}
    secret_access_key: {{ci-secret-access-key}}
    secrets_file: kubernetes.yml
    secrets_passphrase: {{kubernetes-production-private-passphrase}}
    bosh_cert: bosh.pem

- name: kubernetes-staging-deployment
  type: 18f-bosh-deployment
  source:
    target: {{kubernetes-staging-deployment-bosh-target}}
    username: {{kubernetes-staging-deployment-bosh-username}}
    password: {{kubernetes-staging-deployment-bosh-password}}
    deployment: {{kubernetes-staging-deployment-bosh-deployment}}
    ignore_ssl: false

- name: kubernetes-production-deployment
  type: 18f-bosh-deployment
  source:
    target: {{kubernetes-production-deployment-bosh-target}}
    username: {{kubernetes-production-deployment-bosh-username}}
    password: {{kubernetes-production-deployment-bosh-password}}
    deployment: {{kubernetes-production-deployment-bosh-deployment}}
    ignore_ssl: false

- name: kubernetes-broker-staging-deployment
  type: cf
  source:
    api: {{cf-api-url-staging}}
    username: {{cf-deploy-username-staging}}
    password: {{cf-deploy-password-staging}}
    organization: {{cf-organization-staging}}
    space: {{cf-space-staging}}
    skip_cert_check: false

- name: kubernetes-broker-production-deployment
  type: cf
  source:
    api: {{cf-api-url-production}}
    username: {{cf-deploy-username-production}}
    password: {{cf-deploy-password-production}}
    organization: {{cf-organization-production}}
    space: {{cf-space-production}}
    skip_cert_check: false

- name: slack
  type: slack-notification
  source:
    url: {{slack-webhook-url}}

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: 18f-bosh-deployment
  type: docker-image
  source:
    repository: 18fgsa/bosh-deployment-resource

- name: cg-common
  type: docker-image
  source:
    repository: 18fgsa/cg-common-resource
