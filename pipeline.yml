---
groups:
- name: all
  jobs:
  - fluentd-cloudwatch
  - elasticsearch-24
  - elasticsearch-56
  - nginx
  - mongo-36
  - redis32
  - plan-kubernetes-production
  - deploy-kubernetes-production
  - deploy-kubernetes-broker-production
  - acceptance-tests-production
  - test-exporter
  - deploy-exporter-production
- name: production
  jobs:
  - plan-kubernetes-production
  - deploy-kubernetes-production
  - deploy-kubernetes-broker-production
  - deploy-exporter-production
  - acceptance-tests-production
- name: docker-images
  jobs:
  - fluentd-cloudwatch
  - elasticsearch-24
  - elasticsearch-56
  - nginx
  - mongo-36
  - elasticsearch-base
  - elasticsearch-ha
  - redis32

params:
  production:
    cf: &cf-production
      CF_API_URL: ((cf-api-url-production))
      CF_USERNAME: ((cf-deploy-username-production))
      CF_PASSWORD: ((cf-deploy-password-production))
      CF_ORGANIZATION: ((cf-organization-production))
      CF_SPACE: ((cf-space-production))
    cf-tests: &cf-production-tests
      CF_API_URL: ((cf-api-url-production))
      CF_USERNAME: ((cf-deploy-username-production))
      CF_PASSWORD: ((cf-deploy-password-production))
      CF_ORGANIZATION: ((cf-organization-production))
      CF_SPACE: ((cf-space-production-acctests))
    bosh-errand: &bosh-errand-production
      BOSH_ENVIRONMENT: ((kubernetes-production-deployment-bosh-target))
      BOSH_CLIENT: ((kubernetes-production-deployment-bosh-username))
      BOSH_CLIENT_SECRET: ((kubernetes-production-deployment-bosh-password))
      BOSH_DEPLOYMENT: ((kubernetes-production-deployment-bosh-deployment))
      BOSH_CA_CERT: common/master-bosh.crt
  acceptance:
    redis28-tests: &redis28-tests
      SERVICE_NAME: redis28
      PLAN_NAME: standard
      TEST_PATH: kubernetes-config/acceptance/redis28
    redis32-micro-tests: &redis32-micro-tests
      SERVICE_NAME: redis32
      PLAN_NAME: micro
      TEST_PATH: kubernetes-config/acceptance/redis32
    redis32-tests: &redis32-tests
      SERVICE_NAME: redis32
      PLAN_NAME: standard
      TEST_PATH: kubernetes-config/acceptance/redis32
    redis32-ha-tests: &redis32-ha-tests
      SERVICE_NAME: redis32
      PLAN_NAME: standard-ha
      TEST_PATH: kubernetes-config/acceptance/redis32
    mongodb36-tests: &mongodb36-tests
      SERVICE_NAME: mongodb36
      SERVICE_LABEL: mongodb36
      PLAN_NAME: standard
      TEST_PATH: kubernetes-config/acceptance/mongodb36
    elasticsearch24-tests: &elasticsearch24-tests
      SERVICE_NAME: elasticsearch24
      PLAN_NAME: 1x
      TEST_PATH: kubernetes-config/acceptance/elasticsearch24
    elasticsearch56-tests: &elasticsearch56-tests
      SERVICE_NAME: elasticsearch56
      PLAN_NAME: medium
      TEST_PATH: kubernetes-config/acceptance/elasticsearch56
    deployment-params:
      params: &deployment-params
        manifest: kubernetes-manifest/manifest.yml
        releases:
        - kubernetes-release-tarball/*.tgz
        - consul-boshrelease/*.tgz
        stemcells:
        - kubernetes-stemcell-xenial/*.tgz
jobs:
- name: fluentd-cloudwatch
  plan:
  - get: fluentd-cloudwatch-config
    trigger: true
  - put: docker-hub-fluentd-cloudwatch
    params:
      build: fluentd-cloudwatch-config/images/fluentd-cloudwatch

- name: elasticsearch-24
  plan:
  - get: kubernetes-broker-images
    trigger: true
  - put: docker-hub-elasticsearch-24
    params:
      build: kubernetes-broker-images/custom_images/docker-elasticsearch-kubernetes-auth-24
- name: elasticsearch-56
  plan:
  - get: kubernetes-broker-images
    trigger: true
  - put: docker-hub-elasticsearch-56
    params:
      build: kubernetes-broker-images/custom_images/elasticsearch-56
- name: nginx
  plan:
  - get: kubernetes-broker-images
    trigger: true
  - put: docker-hub-nginx
    params:
      build: kubernetes-broker-images/custom_images/nginx
- name: mongo-36
  plan:
  - get: kubernetes-broker-images
    trigger: true
  - put: docker-hub-mongo-36
    params:
      build: kubernetes-broker-images/custom_images/mongo36
- name: elasticsearch-base
  plan:
  - get: erry-day
    trigger: true
  - get: dockerfile-elasticsearch-base
    # pin ES version to 2.4.4
    version:
      ref: 8f00ad520c1c33b879a715700905d3c25c526331
  - put: docker-hub-elasticsearch-base
    params:
      build: dockerfile-elasticsearch-base/2.4
- name: elasticsearch-ha
  plan:
  - get: kubernetes-broker-images
    trigger: true
  - get: docker-hub-elasticsearch-base
    trigger: true
    passed:
    - elasticsearch-base
    params:
      skip_download: true
  - put: docker-hub-elasticsearch-ha
    params:
      build: kubernetes-broker-images/custom_images/elasticsearch-pet-24

- name: redis32
  plan:
  - get: erry-day
    trigger: true
  - get: kubernetes-broker-images
    trigger: true
  - put: docker-hub-redis32
    params:
      build: kubernetes-broker-images/custom_images/redis-3.2

- name: plan-kubernetes-production
  on_failure:
    params:
      channel: ((slack-channel))
      icon_url: ((slack-icon-url))
      text: |
        :x: FAILED to plan kubernetes on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      username: ((slack-username))
    put: slack
  on_success:
    params:
      channel: ((slack-channel))
      icon_url: ((slack-icon-url))
      text: |
        :white_check_mark: Successfully ran kubernetes production plan ready for review
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      username: ((slack-username))
    put: slack
  plan:
  - in_parallel:
      steps:
        - get: common
          resource: master-bosh-root-cert
        - get: pipeline-tasks
        - get: kubernetes-release
          params:
            submodules: none
        - get: kubernetes-config
          trigger: false
        - get: kubernetes-release-tarball
          trigger: false
        - get: common-secret
          resource: common-production
          trigger: false
        - get: kubernetes-stemcell-xenial
          trigger: false
        - get: consul-boshrelease
          trigger: false
        - get: terraform-yaml
          resource: terraform-yaml-production
  - file: kubernetes-config/build-k8s-manifest.yml
    params:
      CLOUDWATCH_PARAMS: ((cloudwatch-params-production))
      KUBE2IAM_PARAMS: ((kube2iam-params-production))
      TARGET_ENVIRONMENT: production
    task: kubernetes-manifest
  - file: pipeline-tasks/lint-manifest.yml
    input_mapping:
      lint-manifest: kubernetes-manifest
      pipeline-config: kubernetes-config
    params:
      LINTER_CONFIG: bosh-lint.yml
    task: lint-manifest
  - params:
      dry_run: true
      <<: *deployment-params
    put: kubernetes-production-deployment
  serial: true
  serial_groups:
  - production


- name: deploy-kubernetes-production
  serial: true
  plan:
  - in_parallel:
    - get: common
      resource: master-bosh-root-cert
      passed: [plan-kubernetes-production]
    - get: pipeline-tasks
      passed: [plan-kubernetes-production]
    - get: kubernetes-release
      passed: [plan-kubernetes-production]
      params:
        submodules: none
    # all triggers set to false until k8s AWS volume issues are sorted
    # once that happens it's ok to set all triggers below back to true
    - get: kubernetes-config
      trigger: false
      passed: [plan-kubernetes-production]
    - get: kubernetes-release-tarball
      passed: [plan-kubernetes-production]
      trigger: false
    - get: common-secret
      resource: common-production
      trigger: false
      passed: [plan-kubernetes-production]
    - get: kubernetes-stemcell-xenial
      passed: [plan-kubernetes-production]
      trigger: false
    - get: consul-boshrelease
      passed: [plan-kubernetes-production]
      trigger: false
    - get: terraform-yaml
      resource: terraform-yaml-production
      passed: [plan-kubernetes-production]
  - task: kubernetes-manifest
    file: kubernetes-config/build-k8s-manifest.yml
    params:
      CLOUDWATCH_PARAMS: ((cloudwatch-params-production))
      KUBE2IAM_PARAMS: ((kube2iam-params-production))
      TARGET_ENVIRONMENT: production
  - *lint-manifest
  - put: kubernetes-production-deployment
    params: *deployment-params
  - task: create-kubernetes-dns
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_ERRAND: create-kubernetes-dns
      <<: *bosh-errand-production
  - task: apply-kubernetes-manifests
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_ERRAND: apply-kubernetes-manifests
      <<: *bosh-errand-production
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy kubernetes on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed kubernetes on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: deploy-kubernetes-broker-production
  serial: true
  plan:
  - in_parallel:
    - get: pipeline-tasks
    - get: kubernetes-broker
      trigger: true
    - get: kubernetes-config
      passed: [deploy-kubernetes-production]
      trigger: true
  - put: kubernetes-broker-production-deployment
    params:
      manifest: kubernetes-broker/manifest.yml
      path: kubernetes-broker
      current_app_name: kubernetes-broker
      environment_variables:
        AUTH_USER: ((broker-auth-user-production))
        AUTH_PASS: ((broker-auth-pass-production))
        CONNECTOR_TYPE: static
        CONSUL_DOMAIN: ((consul-domain-production))
        CLUSTER_API_SERVER: ((api-server-production))
        CLUSTER_USERNAME: ((cluster-username-production))
        CLUSTER_PASSWORD: ((cluster-password-production))
        CF_CLIENT_ID: kubernetes-client
        CF_CLIENT_SECRET: ((cf-client-secret-production))
        CF_TOKEN_URL: ((cf-token-url-production))
        CF_API_ENDPOINT: ((cf-api-url-production))
        CF_TOKEN_KEY: ((cf-token-key-production))
  - in_parallel:
    - task: register-service-broker-restricted-production
      file: pipeline-tasks/register-service-broker.yml
      params:
        <<: *cf-production
        BROKER_NAME: kubernetes-broker
        AUTH_USER: ((broker-auth-user-production))
        AUTH_PASS: ((broker-auth-pass-production))
        SERVICES: redis28:standard redis32:standard redis32:standard-ha elasticsearch24:1x
          elasticsearch24:3x elasticsearch24:6x elasticsearch24:medium-ha elasticsearch56:medium
          elasticsearch56:medium-ha
        SERVICE_ORGANIZATION: ((broker-service-organization-restricted-production))

- name: acceptance-tests-production
  serial: true
  plan:
  - in_parallel:
    - get: kubernetes-config
      passed: [deploy-kubernetes-broker-production]
      trigger: true
    - get: kubernetes-broker
      passed: [deploy-kubernetes-broker-production]
      trigger: true
  - task: clear-acceptance-space
    file: kubernetes-config/acceptance/clear-acceptance-space.yml
    params: *cf-production-tests
  - in_parallel:
    - task: acceptance-test-redis28-standard
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production-tests
        <<: *redis28-tests
    - task: acceptance-test-redis32-micro
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production-tests
        <<: *redis32-micro-tests
    - task: acceptance-test-redis32-standard
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production-tests
        <<: *redis32-tests
    - task: acceptance-test-redis32-standard-ha
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production-tests
        <<: *redis32-ha-tests
        # EXTRA TESTS are executed with CWD = TEST_PATH
        EXTRA_TESTS: ./redis-ha.sh
        K8S_USERNAME: ((cluster-username-production))
        K8S_PASSWORD: ((cluster-password-production))
        K8S_APISERVER: ((api-server-production))
    - task: acceptance-test-mongo36-standard
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production-tests
        <<: *mongodb36-tests
    - task: acceptance-test-elasticsearch24-persistent
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production-tests
        <<: *elasticsearch24-tests
    - task: acceptance-test-elasticsearch24-ha
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production-tests
        SERVICE_NAME: elasticsearch24
        PLAN_NAME: medium-ha
        TEST_PATH: kubernetes-config/acceptance/elasticsearch24
        # EXTRA TESTS are executed with CWD = TEST_PATH
        EXTRA_TESTS: ./elastic-ha.sh
        K8S_USERNAME: ((cluster-username-production))
        K8S_PASSWORD: ((cluster-password-production))
        K8S_APISERVER: ((api-server-production))
    - task: acceptance-test-elasticsearch56
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production-tests
        <<: *elasticsearch56-tests
    - task: acceptance-test-elasticsearch56-ha
      file: kubernetes-config/acceptance/run-acceptance-test.yml
      params:
        <<: *cf-production-tests
        SERVICE_NAME: elasticsearch56
        PLAN_NAME: medium-ha
        TEST_PATH: kubernetes-config/acceptance/elasticsearch56
        # EXTRA TESTS are executed with CWD = TEST_PATH
        EXTRA_TESTS: ./elastic-ha.sh
        K8S_USERNAME: ((cluster-username-production))
        K8S_PASSWORD: ((cluster-password-production))
        K8S_APISERVER: ((api-server-production))

- name: test-exporter
  plan:
  - in_parallel:
    - get: exporter-src
      trigger: true
    - get: kubernetes-config
  - task: test
    file: kubernetes-config/test-exporter.yml

- name: deploy-exporter-production
  plan:
  - get: exporter-src
    trigger: true
  - put: exporter-app-production
    params:
      path: exporter-src
      manifest: exporter-src/manifest.yml
      current_app_name: kubernetes-broker-exporter
      environment_variables:
        BROKER_EXPORTER_KUBERNETES_URL: ((api-server-production))
        BROKER_EXPORTER_KUBERNETES_USERNAME: ((cluster-username-production))
        BROKER_EXPORTER_KUBERNETES_PASSWORD: ((cluster-password-production))
        BROKER_EXPORTER_KUBERNETES_NAMESPACE: default
        BROKER_EXPORTER_CONSUL_DOMAIN: service.kubernetes
        BROKER_EXPORTER_WEB_AUTH_USERNAME: ((exporter-auth-username-production))
        BROKER_EXPORTER_WEB_AUTH_PASSWORD: ((exporter-auth-password-production))
        BROKER_EXPORTER_METRICS_ENVIRONMENT: production
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy kubernetes broker exporter on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed kubernetes broker exporter on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

resources:
- name: master-bosh-root-cert
  type: s3-iam
  source:
    bucket: ((kubernetes-private-bucket))
    region_name: ((aws-region))
    versioned_file: master-bosh.crt

- name: pipeline-tasks
  type: git
  source:
    uri: ((pipeline-tasks-git-url))
    branch: ((pipeline-tasks-git-branch))

- name: kubernetes-release
  type: git
  source:
    uri: ((kubernetes-release-git-url))
    branch: ((kubernetes-release-git-branch))

- name: kubernetes-broker
  type: git
  source:
    uri: ((kubernetes-broker-git-url))
    branch: ((kubernetes-broker-git-branch))

- name: kubernetes-config
  type: git
  source:
    uri: ((kubernetes-config-git-url))
    branch: ((kubernetes-config-git-branch))

- name: exporter-src
  type: git
  source:
    uri: ((exporter-src-git-uri))
    branch: ((exporter-src-git-branch))

- name: kubernetes-stemcell-xenial
  type: bosh-io-stemcell
  source:
    name: bosh-aws-xen-hvm-ubuntu-xenial-go_agent

- name: consul-boshrelease
  type: bosh-io-release
  source:
    repository: cloudfoundry-community/consul-boshrelease

- name: common-production
  type: s3-iam
  source:
    region_name: ((aws-region))
    bucket: ((kubernetes-private-bucket))
    versioned_file: production-kubernetes.yml

- name: kubernetes-production-deployment
  type: bosh-deployment
  source:
    target: ((kubernetes-production-deployment-bosh-target))
    client: ((kubernetes-production-deployment-bosh-client))
    client_secret: ((kubernetes-production-deployment-bosh-client-secret))
    ca_cert: ((kubernetes-production-ca-cert))
    deployment: kubernetes

- name: kubernetes-broker-production-deployment
  type: cf
  source:
    api: ((cf-api-url-production))
    username: ((cf-deploy-username-production))
    password: ((cf-deploy-password-production))
    organization: ((cf-organization-production))
    space: ((cf-space-production))

- name: exporter-app-production
  type: cf
  source:
    api: ((cf-api-url-production))
    username: ((cf-deploy-username-production))
    password: ((cf-deploy-password-production))
    organization: ((cf-organization-production))
    space: ((cf-space-production))

- name: slack
  type: slack-notification
  source:
    url: ((slack-webhook-url))

- name: fluentd-cloudwatch-config
  type: git
  source:
    uri: ((kubernetes-config-git-url))
    branch: ((kubernetes-config-git-branch))
    paths:
    - images/fluentd-cloudwatch/*

- name: kubernetes-broker-images
  type: git
  source:
    uri: ((kubernetes-broker-git-url))
    branch: ((docker-images-git-branch))
    paths:
    - custom_images/*

- name: dockerfile-elasticsearch-base
  type: git
  source:
    uri: https://github.com/docker-library/elasticsearch
    branch: master
    paths:
    - 2.4/*

- name: docker-hub-fluentd-cloudwatch
  type: docker-image
  source:
    email: ((docker-email))
    username: ((docker-username))
    password: ((docker-password))
    repository: ((docker-repo-fluentd))
    tag: ((docker-tag-fluentd-cloudwatch))

- name: docker-hub-elasticsearch-24
  type: docker-image
  source:
    email: ((docker-email))
    username: ((docker-username))
    password: ((docker-password))
    repository: ((docker-repo-elastic24))
    tag: ((docker-tag-elasticsearch-24))

- name: docker-hub-elasticsearch-56
  type: docker-image
  source:
    email: ((docker-email))
    username: ((docker-username))
    password: ((docker-password))
    repository: ((docker-repo-elastic56))
    tag: ((docker-tag-elasticsearch-56))

- name: docker-hub-nginx
  type: docker-image
  source:
    email: ((docker-email))
    username: ((docker-username))
    password: ((docker-password))
    repository: ((docker-repo-nginx))
    tag: ((docker-tag-nginx))

- name: docker-hub-mongo-36
  type: docker-image
  source:
    email: ((docker-email))
    username: ((docker-username))
    password: ((docker-password))
    repository: ((docker-repo-mongo-36))
    tag: ((docker-tag-mongo-36))

- name: docker-hub-elasticsearch-base
  type: docker-image
  source:
    email: ((docker-email))
    username: ((docker-username))
    password: ((docker-password))
    repository: ((docker-repo-elastic-base))
    tag: ((docker-tag-elastic-base))

- name: docker-hub-elasticsearch-ha
  type: docker-image
  source:
    email: ((docker-email))
    username: ((docker-username))
    password: ((docker-password))
    repository: ((docker-repo-elastic-ha))
    tag: ((docker-tag-elastic-ha))

- name: docker-hub-redis32
  type: docker-image
  source:
    email: ((docker-email))
    username: ((docker-username))
    password: ((docker-password))
    repository: ((docker-repo-redis))
    tag: ((docker-tag-redis32))

- &kubernetes-release-tarball
  name: kubernetes-release-tarball
  type: s3-iam
  source:
    bucket: ((s3-bosh-releases-bucket))
    regexp: kubernetes-(.*).tgz
    region_name: us-gov-west-1

- name: terraform-yaml-production
  type: s3-iam
  source:
    bucket: ((tf-state-bucket-production))
    versioned_file: ((tf-state-file-production))
    region_name: ((aws-region))
- name: erry-day
  type: time
  source: {interval: 24h}

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource
